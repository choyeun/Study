/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => CheckboxReorderPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");

// src/reorderCheckboxes.ts
function reorderCheckboxesInList(inputText, moveUp) {
  var _a;
  const checkboxPattern = /^- \[(x| |\/)\] .+(\n[ \t]+-.*)*$/gm;
  const allCheckboxes = (_a = inputText.match(checkboxPattern)) != null ? _a : [];
  const uncheckedCheckboxes = allCheckboxes.filter(
    (cb) => cb.startsWith("- [ ]")
  );
  const halfCheckedCheckboxes = allCheckboxes.filter(
    (cb) => cb.startsWith("- [/]")
  );
  const checkedCheckboxes = allCheckboxes.filter(
    (cb) => cb.startsWith("- [x]")
  );
  let reorderedCheckboxes;
  if (moveUp) {
    reorderedCheckboxes = [...uncheckedCheckboxes, ...halfCheckedCheckboxes, ...checkedCheckboxes];
  } else {
    reorderedCheckboxes = [...checkedCheckboxes, ...halfCheckedCheckboxes, ...uncheckedCheckboxes];
  }
  const reorderedText = inputText.replace(
    checkboxPattern,
    () => reorderedCheckboxes.shift() || ""
  );
  return reorderedText;
}
function reorderCheckboxesInFile(inputText, moveUp) {
  const checkboxListPattern = /^- \[.+(\n[ \t]*- .*)*$/gm;
  const reorderedText = inputText.replace(
    checkboxListPattern,
    (match) => reorderCheckboxesInList(match, moveUp)
  );
  return reorderedText;
}

// src/main.ts
var DEFAULT_SETTINGS = {
  sortTop: true
};
var CheckboxReorderPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    console.log("Checkbox Reorder Plugin loaded");
    this.addCommand({
      id: "reorder-checkboxes",
      name: "Reorder Checkboxes in List",
      editorCallback: (editor, view) => {
        this.reorderCheckboxes(editor);
      }
    });
    this.addSettingTab(new CheckboxReorderSettingsTab(this.app, this));
  }
  onunload() {
    console.log("Checkbox Reorder Plugin unloaded");
  }
  async loadSettings() {
    this.settings = Object.assign(
      {},
      DEFAULT_SETTINGS,
      await this.loadData()
    );
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  reorderCheckboxes(editor) {
    const currentText = editor.getValue();
    const reorderedText = reorderCheckboxesInFile(
      currentText,
      this.settings.sortTop
    );
    editor.setValue(reorderedText);
  }
};
var CheckboxReorderSettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    let { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Checkbox Reorder Settings" });
    new import_obsidian.Setting(containerEl).setName("Top / Bottom").setDesc(
      "On = Top, Off = Bottom. Choose whether to sort checkboxes at the top or bottom."
    ).addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.sortTop).onChange(async (value) => {
        this.plugin.settings.sortTop = value;
        await this.plugin.saveSettings();
      })
    );
  }
};


/* nosourcemap */